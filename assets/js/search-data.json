{"0": {
    "doc": 404,
    "title": "404",
    "content": "Page not found :( . The requested page could not be found. ",
    "url": "/string-morpher/404#404",
    
    "relUrl": "/404#404"
  },"1": {
    "doc": 404,
    "title": 404,
    "content": " ",
    "url": "/string-morpher/404",
    
    "relUrl": "/404"
  },"2": {
    "doc": "A lot of manipulators",
    "title": "String useful manipulation",
    "content": ". | capitalize | fromBase64 | onlyAlpha | onlyNumbers | sub | replace | toBase64 | toLower | toUpper | trim | withoutSpaces | . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#string-useful-manipulation",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#string-useful-manipulation"
  },"3": {
    "doc": "A lot of manipulators",
    "title": "capitalize",
    "content": "Capitalize each word . $string = 'hello world'; $string = SM::capitalize($string); // or $string = SM::make($string) -&gt;capitalize(); echo $string; // Hello World . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#capitalize",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#capitalize"
  },"4": {
    "doc": "A lot of manipulators",
    "title": "fromBase64",
    "content": "Decode from base64 . $string = 'SGVsbG8gd29ybGQ='; $string = SM::fromBase64($string); // or $string = SM::make($string) -&gt;fromBase64(); echo $string; // Hello world . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#frombase64",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#frombase64"
  },"5": {
    "doc": "A lot of manipulators",
    "title": "onlyAlpha",
    "content": "Only keep letters . $string = 'Hello 123 world'; $string = SM::onlyAlpha($string); // or $string = SM::make($string) -&gt;onlyAlpha(); echo $string; // Helloworld . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#onlyalpha",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#onlyalpha"
  },"6": {
    "doc": "A lot of manipulators",
    "title": "onlyNumbers",
    "content": "Only keep numbers . $string = 'Hello 123 world'; $string = SM::onlyNumbers($string); // or $string = SM::make($string) -&gt;onlyNumbers(); echo $string; // 123 . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#onlynumbers",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#onlynumbers"
  },"7": {
    "doc": "A lot of manipulators",
    "title": "sub",
    "content": "Performs substring . $string = 'Hello world'; $string = SM::sub($string, 3, 5); // or $string = SM::make($string) -&gt;sub(3, 5); echo $string; // lo wo . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#sub",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#sub"
  },"8": {
    "doc": "A lot of manipulators",
    "title": "replace",
    "content": "Replace all occurrences of a string. $string = 'The quick brown fox jumps'; $string = SM::sub($string, 'fox', 'dog'); // or $string = SM::make($string) -&gt;sub('fox', 'dog'); echo $string; // The quick brown dog jumps // case insensitive: $string = 'The quick brown Fox jumps'; $string = SM::sub($string, 'fox', 'Dog'); // or $string = SM::make($string) -&gt;sub('fox', 'Dog'); echo $string; // The quick brown Dog jumps . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#replace",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#replace"
  },"9": {
    "doc": "A lot of manipulators",
    "title": "toBase64",
    "content": "Encode to base64 . $string = 'Hello world'; $string = SM::toBase64($string); // or $string = SM::make($string) -&gt;toBase64(); echo $string; // SGVsbG8gd29ybGQ= . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#tobase64",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#tobase64"
  },"10": {
    "doc": "A lot of manipulators",
    "title": "toLower",
    "content": "Morph to lower case. $string = 'HeLlO wOrLd'; $string = SM::toLower($string); // or $string = SM::make($string) -&gt;toLower(); echo $string; // hello world . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#tolower",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#tolower"
  },"11": {
    "doc": "A lot of manipulators",
    "title": "toUpper",
    "content": "Morph to upper case. $string = 'HeLlO wOrLd'; $string = SM::toUpper($string); // or $string = SM::make($string) -&gt;toUpper(); echo $string; // HELLO WORLD . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#toupper",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#toupper"
  },"12": {
    "doc": "A lot of manipulators",
    "title": "trim",
    "content": "Remove all spaces from the start and end. $string = ' Hello world '; $string = SM::trim($string); // or $string = SM::make($string) -&gt;trim(); echo $string; // Hello world // you can set what caracters you can trim $string = SM::trim($string, \" \\n\\r\\t\\v\\0\"); $string = SM::make($string) -&gt;trim(\" \\n\\r\\t\\v\\0\"); . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#trim",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#trim"
  },"13": {
    "doc": "A lot of manipulators",
    "title": "withoutSpaces",
    "content": "Remove all spaces . $string = 'Hello world'; $string = SM::withoutSpaces($string); // or $string = SM::make($string) -&gt;withoutSpaces(); echo $string; // Helloworld . ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/#withoutspaces",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/#withoutspaces"
  },"14": {
    "doc": "A lot of manipulators",
    "title": "A lot of manipulators",
    "content": " ",
    "url": "/string-morpher/docs/methods/a-lot-of-manipulators/",
    
    "relUrl": "/docs/methods/a-lot-of-manipulators/"
  },"15": {
    "doc": "Brazilian Maskers",
    "title": "Brazilian Masks",
    "content": ". | maskBrCep | maskBrCpf | maskBrCnpj | maskBrPhone | . ",
    "url": "/string-morpher/docs/methods/brazilian-maskers/#brazilian-masks",
    
    "relUrl": "/docs/methods/brazilian-maskers/#brazilian-masks"
  },"16": {
    "doc": "Brazilian Maskers",
    "title": "maskBrCep",
    "content": "Apply the Brazilian CEP mask . $string = SM::maskBrCep($string); $string = SM::withoutSpaces($string) -&gt;maskBrCep(); . ",
    "url": "/string-morpher/docs/methods/brazilian-maskers/#maskbrcep",
    
    "relUrl": "/docs/methods/brazilian-maskers/#maskbrcep"
  },"17": {
    "doc": "Brazilian Maskers",
    "title": "maskBrCpf",
    "content": "Apply the Brazilian CEP mask . $string = SM::maskBrCpf($string); $string = SM::withoutSpaces($string) -&gt;maskBrCpf(); . ",
    "url": "/string-morpher/docs/methods/brazilian-maskers/#maskbrcpf",
    
    "relUrl": "/docs/methods/brazilian-maskers/#maskbrcpf"
  },"18": {
    "doc": "Brazilian Maskers",
    "title": "maskBrCnpj",
    "content": "Apply the Brazilian CNPJ mask . $string = SM::maskBrCnpj($string); $string = SM::withoutSpaces($string) -&gt;maskBrCnpj(); . ",
    "url": "/string-morpher/docs/methods/brazilian-maskers/#maskbrcnpj",
    
    "relUrl": "/docs/methods/brazilian-maskers/#maskbrcnpj"
  },"19": {
    "doc": "Brazilian Maskers",
    "title": "maskBrPhone",
    "content": "Apply the Brazilian Phone mask . $string = SM::maskBrPhone($string); $string = SM::withoutSpaces($string) -&gt;maskBrPhone(); . ",
    "url": "/string-morpher/docs/methods/brazilian-maskers/#maskbrphone",
    
    "relUrl": "/docs/methods/brazilian-maskers/#maskbrphone"
  },"20": {
    "doc": "Brazilian Maskers",
    "title": "Brazilian Maskers",
    "content": " ",
    "url": "/string-morpher/docs/methods/brazilian-maskers/",
    
    "relUrl": "/docs/methods/brazilian-maskers/"
  },"21": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": "Contributions are always welcome, but to keep things organized, keep in mind the following rules. ",
    "url": "/string-morpher/docs/contributing/",
    
    "relUrl": "/docs/contributing/"
  },"22": {
    "doc": "Contributing",
    "title": "Bug Reports",
    "content": "When reporting a bug in the package, make sure you follow the rules: . | You have read the Installation and General Configuration sections of the documentation; | The issue you’re facing is not documented; | A GitHub issue with the problem you’re having doesn’t already exist (in an open or closed state); | . Failure to do so, will result in a closed ticket. ",
    "url": "/string-morpher/docs/contributing/#bug-reports",
    
    "relUrl": "/docs/contributing/#bug-reports"
  },"23": {
    "doc": "Contributing",
    "title": "Pull Requests",
    "content": "Fixing a bug, correcting a typo or adding a new feature? . Just remember that all pull requests should be done against the main branch. Install, develop, test, contribute… . composer install # do some magic vendor/bin/phpcs vendor/bin/phpunit # commit # make a pull request . ",
    "url": "/string-morpher/docs/contributing/#pull-requests",
    
    "relUrl": "/docs/contributing/#pull-requests"
  },"24": {
    "doc": "Contributing",
    "title": "Repository",
    "content": "Visit the repository in github . ",
    "url": "/string-morpher/docs/contributing/#repository",
    
    "relUrl": "/docs/contributing/#repository"
  },"25": {
    "doc": "Methods",
    "title": "Methods",
    "content": "Documentation of methods . The String Morpher library is designed with a focus on simplicity and efficiency, allowing developers to chain multiple methods in a seamless and readable manner. This makes it easy to perform complex string manipulations in a single flow. Dont Forget to import the magic! . use SSolWEB\\StringMorpher\\StringMorpher as SM; . ",
    "url": "/string-morpher/docs/methods/",
    
    "relUrl": "/docs/methods/"
  },"26": {
    "doc": "Introdução",
    "title": "String Morpher",
    "content": "A powerful string manipulation library . String Morpher A powerful and versatile string manipulation library designed for developers who need efficient and intuitive solutions for modifying and masking strings. With String Morpher, you can unlock a host of advanced methods to transform your strings effortlessly. Its chaining capabilities allow you to perform complex operations in a clean, readable manner, enhancing your development experience. Whether you’re formatting user input, crafting dynamic content, or safeguarding sensitive data, String Morpher is your go-to tool for all string-related tasks. Start by reading the instalation tutorial, then check the Documentation for more information. ",
    "url": "/string-morpher/#string-morpher",
    
    "relUrl": "/#string-morpher"
  },"27": {
    "doc": "Introdução",
    "title": "Introdução",
    "content": " ",
    "url": "/string-morpher/",
    
    "relUrl": "/"
  },"28": {
    "doc": "Instalation",
    "title": "Instalation",
    "content": "How to instalation . ",
    "url": "/string-morpher/docs/installation/",
    
    "relUrl": "/docs/installation/"
  },"29": {
    "doc": "Instalation",
    "title": "Check Composer",
    "content": "To install the String Morpher package via Composer, follow these steps: . | Ensure you have Composer installed. If you don’t already have it, download and install Composer from getcomposer.org. | In your terminal, navigate to your project directory. | Run the following command to add the String Morpher package to your project: . | . composer require ssolweb/string-morpher . This will download the library and automatically update your project’s composer.json file with the package details. ",
    "url": "/string-morpher/docs/installation/#check-composer",
    
    "relUrl": "/docs/installation/#check-composer"
  },"30": {
    "doc": "Instalation",
    "title": "Use",
    "content": ". | After installation, you can include the package in your code and start using its powerful string manipulation features: | . require 'vendor/autoload.php'; use SSolWEB\\StringMorpher\\StringMorpher as SM; $morpher = SM::onlyAlpha($string); // Start morphing your strings here! . The String Morpher library is designed with a focus on simplicity and efficiency, allowing developers to chain multiple methods in a seamless and readable manner. This makes it easy to perform complex string manipulations in a single flow. $captalizedAlpha = SM::onlyAlpha($string) -&gt;captalize(); $brCpfMask = SM::onlyNumbers($string) -&gt;maskBrCpf(); $camelCase = SM::captalize($string) -&gt;withoutSpaces(); . Chainable Methods: The methods in String Morpher are designed to return the instance of the class itself, enabling developers to apply multiple transformations step by step. Clean and Readable Code: By chaining methods, you can avoid writing verbose and repetitive code. Each transformation is applied in sequence, improving both clarity and maintainability. Enjoy 😊 . Check methods . ",
    "url": "/string-morpher/docs/installation/#use",
    
    "relUrl": "/docs/installation/#use"
  },"31": {
    "doc": "License",
    "title": "The MIT License (MIT)",
    "content": "Copyright (C) 2015-2023 Antério Vieira, Quetzy Garcia, Raphael França. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "url": "/string-morpher/docs/license/#the-mit-license-mit",
    
    "relUrl": "/docs/license/#the-mit-license-mit"
  },"32": {
    "doc": "License",
    "title": "License",
    "content": " ",
    "url": "/string-morpher/docs/license/",
    
    "relUrl": "/docs/license/"
  }
}
