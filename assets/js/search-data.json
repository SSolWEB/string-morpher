{"0": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": "Contributions are always welcome, but to keep things organized, keep in mind the following rules. ",
    "url": "/string-morpher/contributing.html",
    
    "relUrl": "/contributing.html"
  },"1": {
    "doc": "Contributing",
    "title": "Bug Reports",
    "content": "When reporting a bug in the package, make sure you follow the rules: . | You have read the Installation and General Configuration sections of the documentation; | The issue you‚Äôre facing is not documented; | A GitHub issue with the problem you‚Äôre having doesn‚Äôt already exist (in an open or closed state); | . Failure to do so, will result in a closed ticket. ",
    "url": "/string-morpher/contributing.html#bug-reports",
    
    "relUrl": "/contributing.html#bug-reports"
  },"2": {
    "doc": "Contributing",
    "title": "Pull Requests",
    "content": "Fixing a bug, correcting a typo or adding a new feature? . Just remember that all pull requests should be done against the main branch. ",
    "url": "/string-morpher/contributing.html#pull-requests",
    
    "relUrl": "/contributing.html#pull-requests"
  },"3": {
    "doc": "Contributing",
    "title": "Repository",
    "content": "Visit the repository in github . ",
    "url": "/string-morpher/contributing.html#repository",
    
    "relUrl": "/contributing.html#repository"
  },"4": {
    "doc": "Introdu√ß√£o",
    "title": "String Morpher",
    "content": "A powerful string manipulation library . String Morpher A powerful and versatile string manipulation library designed for developers who need efficient and intuitive solutions for modifying and masking strings. With String Morpher, you can unlock a host of advanced methods to transform your strings effortlessly. Its chaining capabilities allow you to perform complex operations in a clean, readable manner, enhancing your development experience. Whether you‚Äôre formatting user input, crafting dynamic content, or safeguarding sensitive data, String Morpher is your go-to tool for all string-related tasks. Start by reading the instalation tutorial, then check the Documentation for more information. ",
    "url": "/string-morpher/#string-morpher",
    
    "relUrl": "/#string-morpher"
  },"5": {
    "doc": "Introdu√ß√£o",
    "title": "Introdu√ß√£o",
    "content": " ",
    "url": "/string-morpher/",
    
    "relUrl": "/"
  },"6": {
    "doc": "Instalation",
    "title": "Instalation",
    "content": "How to instalation . ",
    "url": "/string-morpher/installation.html",
    
    "relUrl": "/installation.html"
  },"7": {
    "doc": "Instalation",
    "title": "Check Composer",
    "content": "To install the String Morpher package via Composer, follow these steps: . | Ensure you have Composer installed. If you don‚Äôt already have it, download and install Composer from getcomposer.org. | In your terminal, navigate to your project directory. | Run the following command to add the String Morpher package to your project: . | . composer require ssolweb/string-morpher . This will download the library and automatically update your project‚Äôs composer.json file with the package details. ",
    "url": "/string-morpher/installation.html#check-composer",
    
    "relUrl": "/installation.html#check-composer"
  },"8": {
    "doc": "Instalation",
    "title": "Use",
    "content": ". | After installation, you can include the package in your code and start using its powerful string manipulation features: | . require 'vendor/autoload.php'; use Ssolweb\\StringMorpher; $morpher = StringMorpher::onlyAlpha($string); // Start morphing your strings here! . The String Morpher library is designed with a focus on simplicity and efficiency, allowing developers to chain multiple methods in a seamless and readable manner. This makes it easy to perform complex string manipulations in a single flow. $captalizedAlpha = StringMorpher::onlyAlpha($string) -&gt;captalize(); $brCpfMask = StringMorpher::onlyNumbers($string) -&gt;maskBrCpf(); $camelCase = StringMorpher::captalize($string) -&gt;withoutSpaces(); . Chainable Methods: The methods in String Morpher are designed to return the instance of the class itself, enabling developers to apply multiple transformations step by step. Clean and Readable Code: By chaining methods, you can avoid writing verbose and repetitive code. Each transformation is applied in sequence, improving both clarity and maintainability. Enjoy üòä . Check methods . ",
    "url": "/string-morpher/installation.html#use",
    
    "relUrl": "/installation.html#use"
  },"9": {
    "doc": "License",
    "title": "The MIT License (MIT)",
    "content": "Copyright (C) 2015-2023 Ant√©rio Vieira, Quetzy Garcia, Raphael Fran√ßa. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: . The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "url": "/string-morpher/license.html#the-mit-license-mit",
    
    "relUrl": "/license.html#the-mit-license-mit"
  },"10": {
    "doc": "License",
    "title": "License",
    "content": " ",
    "url": "/string-morpher/license.html",
    
    "relUrl": "/license.html"
  },"11": {
    "doc": "Methods",
    "title": "Methods",
    "content": "Documentation of methods . The String Morpher library is designed with a focus on simplicity and efficiency, allowing developers to chain multiple methods in a seamless and readable manner. This makes it easy to perform complex string manipulations in a single flow. ",
    "url": "/string-morpher/methods-docs.html",
    
    "relUrl": "/methods-docs.html"
  },"12": {
    "doc": "Methods",
    "title": "onlyNumbers",
    "content": "Only keep numbers . $string = StringMorpher::onlyNumbers($string); $string = StringMorpher::withoutSpaces($string) -&gt;onlyNumbers(); . ",
    "url": "/string-morpher/methods-docs.html#onlynumbers",
    
    "relUrl": "/methods-docs.html#onlynumbers"
  },"13": {
    "doc": "Methods",
    "title": "onlyAlpha",
    "content": "Only keep letters . $string = StringMorpher::onlyAlpha($string); $string = StringMorpher::withoutSpaces($string) -&gt;onlyAlpha(); . ",
    "url": "/string-morpher/methods-docs.html#onlyalpha",
    
    "relUrl": "/methods-docs.html#onlyalpha"
  },"14": {
    "doc": "Methods",
    "title": "withoutSpaces",
    "content": "Remove all spaces . $string = StringMorpher::withoutSpaces($string); $string = StringMorpher::capitalize($string) -&gt;withoutSpaces(); . ",
    "url": "/string-morpher/methods-docs.html#withoutspaces",
    
    "relUrl": "/methods-docs.html#withoutspaces"
  },"15": {
    "doc": "Methods",
    "title": "capitalize",
    "content": "Capitalize each word . $string = StringMorpher::capitalize($string); $string = StringMorpher::withoutSpaces($string) -&gt;capitalize(); . ",
    "url": "/string-morpher/methods-docs.html#capitalize",
    
    "relUrl": "/methods-docs.html#capitalize"
  },"16": {
    "doc": "Methods",
    "title": "maskBrCep",
    "content": "Apply the Brazilian CEP mask . $string = StringMorpher::maskBrCep($string); $string = StringMorpher::withoutSpaces($string) -&gt;maskBrCep(); . ",
    "url": "/string-morpher/methods-docs.html#maskbrcep",
    
    "relUrl": "/methods-docs.html#maskbrcep"
  },"17": {
    "doc": "Methods",
    "title": "maskBrCpf",
    "content": "Apply the Brazilian CEP mask . $string = StringMorpher::maskBrCpf($string); $string = StringMorpher::withoutSpaces($string) -&gt;maskBrCpf(); . ",
    "url": "/string-morpher/methods-docs.html#maskbrcpf",
    
    "relUrl": "/methods-docs.html#maskbrcpf"
  },"18": {
    "doc": "Methods",
    "title": "maskBrCnpj",
    "content": "Apply the Brazilian CNPJ mask . $string = StringMorpher::maskBrCnpj($string); $string = StringMorpher::withoutSpaces($string) -&gt;maskBrCnpj(); . ",
    "url": "/string-morpher/methods-docs.html#maskbrcnpj",
    
    "relUrl": "/methods-docs.html#maskbrcnpj"
  },"19": {
    "doc": "Methods",
    "title": "maskBrPhone",
    "content": "Apply the Brazilian Phone mask . $string = StringMorpher::maskBrPhone($string); $string = StringMorpher::withoutSpaces($string) -&gt;maskBrPhone(); . ",
    "url": "/string-morpher/methods-docs.html#maskbrphone",
    
    "relUrl": "/methods-docs.html#maskbrphone"
  }
}
